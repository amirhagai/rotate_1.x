# Specify the PyTorch, CUDA, and cuDNN versions as arguments to the build
ARG PYTORCH="1.13.0"
ARG CUDA="11.6"
ARG CUDNN="8"

# Use the PyTorch image with CUDA and cuDNN as the base
FROM pytorch/pytorch:${PYTORCH}-cuda${CUDA}-cudnn${CUDNN}-devel

# Set environment variables for Docker build
ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0+PTX"
ENV TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
ARG DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create a new Conda environment with Python 3.9
RUN conda create -y -n pytorch3d python=3.9

# Activate the Conda environment in subsequent commands
SHELL ["conda", "run", "-n", "pytorch3d", "/bin/bash", "-c"]


RUN conda install -c bottler nvidiacub

# Install PyTorch, torchvision, and CUDA support in the Python 3.9 environment
RUN conda install -y pytorch=1.13.0 torchvision cudatoolkit=11.6 -c pytorch -c nvidia \
    && conda install -y -c fvcore -c iopath -c conda-forge fvcore iopath

ENV FORCE_CUDA="1"

# Install openmim
RUN pip install --no-cache-dir -U openmim

# Clone MMCV and MMDetection from source and checkout to specific tags
RUN git clone https://github.com/open-mmlab/mmcv.git /mmcv \
    && cd /mmcv \
    && git checkout v2.0.1 \
    && MMCV_WITH_OPS=1 pip install -e .

RUN git clone https://github.com/open-mmlab/mmdetection.git /mmdetection \
    && cd /mmdetection \
    && git checkout v3.0.0 \
    && pip install -r requirements/build.txt \
    && pip install -v -e .

# Clone and install MMRotate
RUN git clone https://github.com/open-mmlab/mmrotate.git -b 1.x /mmrotate \
    && cd /mmrotate \
    && pip install -r requirements/build.txt \
    && pip install --no-cache-dir -e .

WORKDIR /workspace

# Ensure the Conda environment is activated when the container starts
CMD ["conda", "run", "-n", "pytorch3d", "/bin/bash"]

